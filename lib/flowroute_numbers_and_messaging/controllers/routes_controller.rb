# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module FlowrouteNumbersAndMessaging
  # RoutesController
  class RoutesController < BaseController
    @instance = RoutesController.new

    class << self
      attr_accessor :instance
    end

    def instance
      self.class.instance
    end

    # Use this endpoint to update the primary voice route for a phone number.
    # You must create the route first by following "Create an Inbound Route".
    # You can then assign the created route by specifying its value in a PATCH
    # request.
    # @param [Integer] number_id Required parameter: The phone number in E.164
    # 11-digit North American format to which the primary route for voice will
    # be assigned.
    # @param [void] body Required parameter: The primary route to be assigned.
    # @return void response from the API call
    def update_primary_voice_route(number_id, body)
      # Prepare query url.
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/v2/numbers/{number_id}/relationships/primary_route'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'number_id' => number_id
      )
      _headers = {
        'accept': 'application/vnd.api+json',
        'content-type' => 'application/vnd.api+json; charset=utf-8'
      }
      _query_url = APIHelper.clean_url _query_builder
      puts _query_url

      # Prepare and execute HttpRequest.
      _request = @http_client.patch(
        _query_url,
        headers: _headers,
        parameters: body
      )
      BasicAuth.apply(_request)
      _context = execute_request(_request)
      puts _context.response.status_code

      # Validate response against endpoint and global error codes.
      if _context.response.status_code == 401
        raise ErrorException.new(
          'Unauthorized – There was an issue with your API credentials.',
          _context
        )
      elsif _context.response.status_code == 404
        raise ErrorException.new(
          'The specified resource was not found',
          _context
        )
      end
      validate_response(_context)
    end

    # Use this endpoint to update the failover voice route for a phone number.
    # You must create the route first by following "Create an Inbound Route".
    # You can then assign the created route by specifying its value in a PATCH
    # request.
    # @param [Integer] number_id Required parameter: The phone number in E.164
    # 11-digit North American format to which the failover route for voice will
    # be assigned.
    # @param [void] body Required parameter: The failover route to be
    # assigned.
    # @return void response from the API call
    def update_failover_voice_route(number_id, body)
      # Prepare query url.
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/v2/numbers/{number_id}/relationships/failover_route'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'number_id' => number_id
      )
      _headers = {
        'accept': 'application/vnd.api+json',
        'content-type' => 'application/vnd.api+json; charset=utf-8'
      }
      _query_url = APIHelper.clean_url _query_builder

      # Prepare and execute HttpRequest.
      _request = @http_client.patch(
        _query_url,
        headers: _headers,
        parameters: body
      )

      BasicAuth.apply(_request)
      _context = execute_request(_request)
      puts _context.response.status_code

      # Validate response against endpoint and global error codes.
      if _context.response.status_code == 401
        raise ErrorException.new(
          'Unauthorized – There was an issue with your API credentials.',
          _context
        )
      elsif _context.response.status_code == 404
        raise ErrorException.new(
          'The specified resource was not found',
          _context
        )
      end
      validate_response(_context)
    end

    # Returns a list of your inbound routes. From the list, you can then select
    # routes to use as the primary and failover routes for a phone number, which
    # you can do via "Update Primary Voice Route for a Phone Number" and "Update
    # Failover Voice Route for a Phone Number".
    # @param [Integer] limit Optional parameter: Limits the number of routes to
    # retrieve. A maximum of 200 items can be retrieved.
    # @param [Integer] offset Optional parameter: Offsets the list of routes by
    # your specified value. For example, if you have 4 inbound routes and you
    # entered 1 as your offset value, then only 3 of your routes will be
    # displayed in the response.
    # @return void response from the API call
    def list_inbound_routes(limit = nil,
                            offset = nil)
      # Prepare query url.
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/v2/routes'
      _query_builder = APIHelper.append_url_with_query_parameters(
        _query_builder,
        {
          'limit' => limit,
          'offset' => offset
        },
        array_serialization: Configuration.array_serialization
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare and execute HttpRequest.
      _request = @http_client.get(
        _query_url
      )
      BasicAuth.apply(_request)
      _context = execute_request(_request)
      puts _context.response.status_code

      # Validate response against endpoint and global error codes.
      if _context.response.status_code == 401
        raise APIException.new(
          'Unauthorized',
          _context
        )
      elsif _context.response.status_code == 404
        raise APIException.new(
          'Not Found',
          _context
        )
      end
      validate_response(_context)
      
      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body) unless
        _context.response.raw_body.nil? ||
        _context.response.raw_body.to_s.strip.empty?
      decoded
    end

    # Creates a new inbound route which can then be associated with phone
    # numbers. Please see "List Inbound Routes" to review the route values that
    # you can associate with your Flowroute phone numbers.
    # @param [NewRoute] body Required parameter: The new inbound route to be
    # created.
    # @return mixed response from the API call
    def create_an_inbound_route(body)
      # Prepare query url.
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/v2/routes'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept': 'application/vnd.api+json',
        'content-type' => 'application/vnd.api+json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_s
      )
      puts _request

      BasicAuth.apply(_request)
      _context = execute_request(_request)
      puts _context.response.status_code

      # Validate response against endpoint and global error codes.
      if _context.response.status_code == 401
        raise ErrorException.new(
          'Unauthorized – There was an issue with your API credentials.',
          _context
        )
      elsif _context.response.status_code == 404
        raise ErrorException.new(
          'The specified resource was not found',
          _context
        )
      end
      validate_response(_context)
      
      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body) unless
        _context.response.raw_body.nil? ||
        _context.response.raw_body.to_s.strip.empty?
      decoded
    end
  end
end
