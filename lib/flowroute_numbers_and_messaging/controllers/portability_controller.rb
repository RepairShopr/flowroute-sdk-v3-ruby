# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module FlowrouteNumbersAndMessaging
  # RoutesController
  class PortabilityController < BaseController
    @instance = PortabilityController.new

    class << self
      attr_accessor :instance
    end

    def instance
      self.class.instance
    end

    # Returns a list of your CNAM Records.
    # @param [Integer] limit Optional parameter: Limits the number of records to
    # retrieve. A maximum of 200 items can be retrieved.
    # @param [Integer] offset Optional parameter: Offsets the list of records by
    # your specified value. For example, if you have 4 records and you
    # entered 1 as your offset value, then only 3 of your records will be
    # displayed in the response.
    # @return void response from the API call
    def list_portorders(limit = 10,
                        offset = 0,
                        is_approved=nil)
      # Prepare query url.
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/v2/portorders'
      _query_builder = APIHelper.append_url_with_query_parameters(
        _query_builder,
        {
          'limit' => limit,
          'offset' => offset
        },
        array_serialization: Configuration.array_serialization
      )

      if is_approved != nil
        _query_builder = APIHelper.append_url_with_query_parameters(
          _query_builder,
          {
            'is_approved' => is_approved 
          },
          array_serialization: Configuration.array_serialization
        )
      end

      _query_url = APIHelper.clean_url _query_builder

      # Prepare and execute HttpRequest.
      _request = @http_client.get(
        _query_url
      )
      BasicAuth.apply(_request)
      _context = execute_request(_request)

      # Validate response against endpoint and global error codes.
      if _context.response.status_code == 401
        raise APIException.new(
          'Unauthorized',
          _context
        )
      elsif _context.response.status_code == 404
        raise APIException.new(
          'Not Found',
          _context
        )
      end
      validate_response(_context)
      
      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body) unless
        _context.response.raw_body.nil? ||
        _context.response.raw_body.to_s.strip.empty?
      decoded
    end

    def check_portability(numbers)
      # Prepare query url.
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/v2/portorders/portability'
      query_record = {"numbers" => numbers}
      _query_url = APIHelper.clean_url _query_builder

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        parameters: query_record
      )

      BasicAuth.apply(_request)
      _context = execute_request(_request)

      # Validate response against endpoint and global error codes.
      if _context.response.status_code == 401
        raise APIException.new(
          'Unauthorized',
          _context
        )
      elsif _context.response.status_code == 404
        raise APIException.new(
          'Not Found',
          _context
        )
      end
      validate_response(_context)
      
      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body) unless
        _context.response.raw_body.nil? ||
        _context.response.raw_body.to_s.strip.empty?
      decoded
    end

  end
end
